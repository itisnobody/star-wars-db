{"version":3,"sources":["components/header/index.js","components/header/header.js","components/spinner/index.js","components/spinner/spinner.js","components/error-message/error-message.js","components/error-message/index.js","components/api/swapi-service.js","components/random-planet/random-planet.js","components/random-planet/index.js","components/error-boundry/index.js","components/error-boundry/error-boundry.js","components/row/index.js","components/row/Row.js","components/item-list/item-list.js","components/item-list/index.js","components/hoc-helpers/with-data.js","components/swapi-service-context/swapi-service-context.js","components/hoc-helpers/with-swapi-service.js","components/hoc-helpers/with-child-function.js","components/sw-components/item-lists.js","components/item-details/item-details.js","components/item-details/index.js","components/sw-components/person-details.js","components/sw-components/plane-details.js","components/sw-components/starship-details.js","components/pages/people-page.js","components/pages/planets-page.js","components/pages/starships-page.js","components/app/index.js","components/app/app.js","index.js"],"names":["Header","className","href","Component","Spinner","ErrorMessage","SwapiService","_apiBase","_imgBase","getAllPeople","a","getResource","res","results","map","_transformPerson","getPerson","id","person","getPersonImg","getAllPlanets","_transformPlanet","getPlanet","planet","getPlanetImg","getAllStarships","_transformStarship","getStarship","starship","getStarshipImg","_extractId","name","gender","birthYear","birth_year","eyeColor","eye_color","population","rotationPeriod","rotation_period","diameter","model","manufacturer","costInCredits","cost_in_credits","length","crew","passengers","cargoCapacity","cargo_capacity","url","fetch","this","ok","Error","status","json","item","match","RandomPlanet","props","swapiService","onError","err","setState","error","loading","onPlanetLoaded","console","log","updatePlanet","Math","floor","random","then","catch","state","interval","setInterval","updateInterval","clearInterval","errorMessage","spinner","content","defaultProps","PlanetView","src","alt","ErrorBoundry","children","Row","side","main","ItemList","data","onItemSelected","renderLabel","items","label","onClick","withData","Wrapped","getData","update","createContext","SwapiServiceProvider","Provider","SwapiServiceConsumer","Consumer","withSwapiService","mapServiceToProps","serviceProps","withChildFunction","fn","renderName","PersonList","PlanetList","StarshipList","ItemDetails","img","updateItem","prevProps","itemId","getImgUrl","React","Children","child","cloneElement","Record","field","PeoplePage","selectedItem","PlanetsPage","StarshipsPage","App","selectedPerson","value","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2e28b093.chunk.js","sourcesContent":["import './header.css';\nimport Header from \"./header\";\n\nexport default Header;","import React, {Component} from \"react\";\n\nexport default class Header extends Component {\n  render() {\n    return (\n      <header className={'header d-flex'}>\n        <h3>\n          <a href=\"#\">\n            Star DB\n          </a>\n        </h3>\n        <ul className={'d-flex'}>\n          <li>\n            <a href=\"#\">People</a>\n          </li>\n          <li>\n            <a href=\"#\">Planets</a>\n          </li>\n          <li>\n            <a href=\"#\">Starships</a>\n          </li>\n        </ul>\n      </header>\n    );\n  }\n};","import Spinner from \"./spinner\";\n\nexport default Spinner;","import React from 'react';\nimport './spinner.css';\n\nconst Spinner = () => {\n  return (\n    <div className={'loadingio-spinner-double-ring-6yzmo4p4rgx'}>\n      <div className={'ldio-fup0fcf296'}>\n        <div></div>\n        <div></div>\n      </div>\n    </div>\n  );\n};\n\nexport default Spinner;","import React from 'react';\n\nconst ErrorMessage =() => {\n  return (\n    <div className={'error-message'}>\n      <h1>BOOM!</h1>\n      <span>\n        something has gone terrible wrong\n      </span>\n      <span>\n        (but we already sent droids to fix it)\n      </span>\n    </div>\n  );\n};\n\nexport default ErrorMessage;","import ErrorMessage from \"./error-message\";\nimport \"./error-message.css\";\n\nexport default ErrorMessage;","export default class SwapiService {\n\n  _apiBase = 'https://swapi.dev/api';\n  _imgBase = 'https://starwars-visualguide.com/assets/img';\n\n  async getResource(url) {\n    const res = await fetch(`${this._apiBase}${url}`);\n    if(!res.ok) {\n      throw new Error(`Could not fetch ${url}, received ${res.status}`);\n    }\n\n    return await res.json();\n  }\n\n  getAllPeople = async () => {\n    const res = await this.getResource(`/people/`);\n    return res.results.map(this._transformPerson);\n  }\n\n  getPerson = async id => {\n    const person = await this.getResource(`/people/${id}`);\n    return this._transformPerson(person);\n  }\n\n  getPersonImg = ({id}) => {\n    return `${this._imgBase}/characters/${id}.jpg`;\n  };\n\n  getAllPlanets = async () => {\n    const res = await this.getResource(`/planets/`);\n    return res.results.map(this._transformPlanet);\n  }\n\n  getPlanet = async id => {\n    const planet = await this.getResource(`/planets/${id}`);\n    return this._transformPlanet(planet);\n  }\n\n  getPlanetImg = ({id}) => {\n    return `${this._imgBase}/planets/${id}.jpg`;\n  };\n\n  getAllStarships = async () => {\n    const res = await this.getResource(`/starships/`);\n    return res.results.map(this._transformStarship);\n  }\n\n  getStarship = async id => {\n    const starship = await this.getResource(`/starships/${id}`);\n    return this._transformStarship(starship);\n  }\n\n  getStarshipImg = ({id}) => {\n    return `${this._imgBase}/starships/${id}.jpg`;\n  };\n\n  _extractId(item) {\n    const idRegExp = /\\/([0-9]*)\\/$/;\n    return item.url.match(idRegExp)[1];\n  }\n\n  _transformPerson = person => {\n    return {\n      id: this._extractId(person),\n      name: person.name,\n      gender: person.gender,\n      birthYear: person.birth_year,\n      eyeColor: person.eye_color\n    }\n  }\n\n  _transformPlanet = planet => {\n    return {\n      id: this._extractId(planet),\n      name: planet.name,\n      population: planet.population,\n      rotationPeriod: planet.rotation_period,\n      diameter: planet.diameter\n    }\n  }\n\n  _transformStarship = starship => {\n    return {\n      id: this._extractId(starship),\n      name: starship.name,\n      model: starship.model,\n      manufacturer: starship.manufacturer,\n      costInCredits: starship.cost_in_credits,\n      length: starship.length,\n      crew: starship.crew,\n      passengers: starship.passengers,\n      cargoCapacity: starship.cargo_capacity\n    }\n  }\n};","import React, {Component, Fragment} from \"react\";\n\nimport Spinner from \"../spinner\";\nimport ErrorMessage from \"../error-message\";\nimport SwapiService from \"../api/swapi-service\";\n\nexport default class RandomPlanet extends Component {\n\n  static defaultProps = {\n    updateInterval: 5000\n  };\n\n  static propTypes = {\n    updateInterval: (props, propName, componentName) => {\n      const value = props[propName];\n\n      if(typeof value == \"number\" && !isNaN(value)) {\n        return null;\n      }\n\n      return new TypeError(`${componentName}: ${propName} must be number`);\n    }\n  };\n\n  swapiService = new SwapiService();\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      planet: {},\n      error: false,\n      loading: true\n    };\n    console.log('Its constructor');\n  }\n\n  onError = err => {\n    this.setState({\n      error: true,\n      loading: false\n    });\n  }\n\n  onPlanetLoaded = planet => {\n    // console.log(planet);\n    console.log('Получены данные, меняем состояние');\n    this.setState({\n      planet,\n      loading: false\n    });\n  };\n\n  updatePlanet = () => {\n    const id = Math.floor(Math.random()*10+3);\n    // const id = 177777;\n    console.log('Запрос данных, для обновления планеты');\n    this.swapiService\n      .getPlanet(id)\n      .then(this.onPlanetLoaded)\n      .catch(this.onError)\n  };\n\n  componentDidMount() {\n    console.log('Did Mount');\n    this.updatePlanet();\n    this.interval = setInterval(this.updatePlanet, this.props.updateInterval);\n  }\n\n  componentWillUnmount() {\n    console.log('WillUnmount');\n    clearInterval(this.interval);\n  }\n\n  render() {\n    console.log('Render()');\n    const { error, loading, planet } = this.state;\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error) ? <PlanetView planet={planet}/> : null;\n\n    return (\n      <div className={'random-planet d-flex jumbotron rounded'}>\n        { errorMessage }\n        { spinner }\n        { content }\n      </div>\n    );\n  }\n};\n\nconst PlanetView = props => {\n  const { planet: {id, name, population, rotationPeriod, diameter} } = props;\n\n  return (\n    <Fragment>\n      <img className={'planet-img'}\n           src={`https://starwars-visualguide.com/assets/img/planets/${id}.jpg`} alt=\"\"/>\n      <div>\n        <h4>{name}</h4>\n        <ul className={'list-group list-group-flush'}>\n          <li className={'list-group-item'}>\n            <span className={'term'}>Population</span>\n            <span>{population}</span>\n          </li>\n          <li className={'list-group-item'}>\n            <span className={'term'}>Rotation Period</span>\n            <span>{rotationPeriod}</span>\n          </li>\n          <li className={'list-group-item'}>\n            <span className={'term'}>Diameter</span>\n            <span>{diameter}</span>\n          </li>\n        </ul>\n      </div>\n    </Fragment>\n  );\n};","import './random-planet.css';\nimport RandomPlanet from \"./random-planet\";\n\nexport default RandomPlanet;","import ErrorBoundry from \"./error-boundry\";\n\nexport default ErrorBoundry;","import React, {Component} from \"react\";\nimport ErrorMessage from \"../error-message\";\n\nexport default class ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: false\n    }\n  }\n\n  componentDidCatch() {\n    this.setState({\n      error: true\n    });\n  }\n\n  render() {\n    if (this.state.error) {\n      return <ErrorMessage />;\n    }\n\n    return this.props.children;\n  }\n};","import Row from \"./Row\";\n\nexport default Row;","import React from 'react';\n\nconst Row = ({ side, main }) => {\n  return (\n    <div className={'row mb-2'}>\n      <div className={'col-md-6'}>\n        { side }\n      </div>\n      <div className={'col-md-6'}>\n        { main }\n      </div>\n    </div>\n  );\n};\n\nexport default Row;","import React from \"react\";\nimport './item-list.css';\n\nconst ItemList = props => {\n  const {data, onItemSelected, children: renderLabel} = props;\n\n  const items = data.map(item => {\n    const { id } = item;\n    const label = renderLabel(item);\n\n    return (\n      <li className={'list-group-item'}\n          key={id}\n          onClick={()=>onItemSelected(id)}>\n          { label }\n      </li>\n    );\n  });\n\n  return (\n    <ul className={'item-list list-group'}>\n      { items }\n    </ul>\n  );\n};\n\nItemList.defaultProps = {\n  onItemSelected: () => {}\n};\n\nexport default ItemList;","import ItemList from \"./item-list\";\n\nexport default ItemList;","import React, {Component} from 'react';\n\nimport Spinner from \"../spinner\";\nimport ErrorMessage from \"../error-message\";\n\nconst withData = Wrapped => {\n  return class extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        data: null,\n        error: false,\n        loading: true\n      };\n    }\n\n    update() {\n      this.setState({\n        error: false,\n        loading: true\n      });\n\n      this.props.getData()\n        .then(data => {\n          this.setState({\n            data,\n            loading: false\n          });\n        })\n        .catch(() => {\n          this.setState({\n            error: true,\n            loading: false\n          });\n        });\n    }\n\n    componentDidMount() {\n      this.update();\n    }\n\n    render() {\n      const { data, loading, error } = this.state;\n\n      if (loading) {\n        return <Spinner />;\n      }\n\n      if (error) {\n        return <ErrorMessage />;\n      }\n\n      return <Wrapped {...this.props} data={data}/>;\n    }\n  };\n};\n\nexport default withData;","import { createContext } from 'react';\n\nconst {\n  Provider : SwapiServiceProvider,\n  Consumer : SwapiServiceConsumer\n} = createContext();\n\nexport {\n  SwapiServiceProvider,\n  SwapiServiceConsumer\n};","import React from 'react';\n\nimport { SwapiServiceConsumer } from \"../swapi-service-context\";\n\nconst withSwapiService = mapServiceToProps => Wrapped => {\n  return props => {\n    return (\n      <SwapiServiceConsumer>\n        {\n          swapiService => {\n            const serviceProps = mapServiceToProps(swapiService);\n\n            return (\n              <Wrapped {...props} {...serviceProps} />\n            );\n          }\n        }\n      </SwapiServiceConsumer>\n    );\n  };\n}\n\nexport default withSwapiService;","import React from \"react\";\n\nconst withChildFunction = fn => Wrapped => {\n  return props => {\n    return (\n      <Wrapped {...props}>\n        { fn }\n      </Wrapped>\n    );\n  };\n};\n\nexport default withChildFunction;","import ItemList from \"../item-list\";\nimport { withData, withSwapiService, withChildFunction } from '../hoc-helpers';\n\nconst renderName = item => `${item.name}`;\nconst renderModelAndName = item => `${item.name} (${item.model})`;\n\nconst mapPersonMethodsToProps = swapiService => {\n  return {\n    getData: swapiService.getAllPeople\n  };\n};\n\nconst mapPlanetMethodsToProps = swapiService => {\n  return {\n    getData: swapiService.getAllPlanets\n  };\n};\n\nconst mapStarshipMethodsToProps = swapiService => {\n  return {\n    getData: swapiService.getAllStarships\n  };\n};\n\nconst PersonList = withSwapiService(mapPersonMethodsToProps)(\n                      withData(withChildFunction(renderName)(\n                        ItemList)));\n\nconst PlanetList = withSwapiService(mapPlanetMethodsToProps)(\n                      withData(withChildFunction(renderName)(\n                        ItemList)));\n\nconst StarshipList = withSwapiService(mapStarshipMethodsToProps)(\n                      withData(withChildFunction(renderModelAndName)(\n                        ItemList)));\n\nexport {\n  PersonList,\n  PlanetList,\n  StarshipList\n};","import React, {Component} from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./item-details.css\";\nimport Spinner from \"../spinner\";\nimport ErrorMessage from \"../error-message\";\n\nexport default class ItemDetails extends Component {\n\n  static propTypes = {\n    itemId: PropTypes.number\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: false,\n      loading: false,\n      item: null,\n      img: null\n    };\n  }\n\n  componentDidMount() {\n    this.updateItem();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.itemId !== prevProps.itemId) {\n\n      this.setState({\n        error: false,\n        loading: true\n      });\n\n      this.updateItem();\n    }\n  }\n\n  updateItem() {\n    const {itemId, getData, getImgUrl} = this.props;\n\n    if (!itemId) {\n      return;\n    }\n\n    getData(itemId)\n      .then((item) => {\n        this.setState({\n          loading: false,\n          item,\n          img: getImgUrl(item)\n        });\n      })\n      .catch(() => {\n        this.setState({\n          error: true,\n          loading: false\n        });\n      });\n  }\n\n  render() {\n    const {item, img, loading, error } = this.state;\n\n    if (loading) {\n      return <Spinner />;\n    }\n\n    if (error) {\n      return <ErrorMessage />;\n    }\n\n    if (!item) {\n      return <span>Select from a list</span>\n    }\n\n    return (\n      <div className={'random-planet jumbotron rounded'}>\n        <img className={'planet-img'}\n             src={img} alt=\"\"/>\n        <div>\n          <h4>{item.name}</h4>\n          <ul className={'list-group list-group-flush'}>\n            {\n              React.Children.map(this.props.children, child => {\n                return React.cloneElement(child,{item});\n              })\n            }\n          </ul>\n        </div>\n      </div>\n    );\n  }\n};\n\nconst Record = ({ item, field, label }) => {\n  return (\n    <li className={'list-group-item'}>\n      <span className={'term'}>{label}</span>\n      <span>{item[field]}</span>\n    </li>\n  );\n};\n\nexport {\n  Record\n};","import ItemDetails, { Record } from \"./item-details\";\n\nexport { Record };\nexport default ItemDetails;","import React from 'react';\n\nimport { withSwapiService } from \"../hoc-helpers\";\nimport ItemDetails, { Record } from \"../item-details\";\n\nconst PersonDetails = props => {\n  return (\n    <ItemDetails {...props} >\n\n      <Record field={'gender'} label={'Gender'} />\n      <Record field={'birthYear'} label={'Birth Year'} />\n      <Record field={'eyeColor'} label={'Eye Color'} />\n\n    </ItemDetails>\n  );\n};\n\nconst mapMethodsToProps = swapiService => {\n  return {\n    getData: swapiService.getPerson,\n    getImgUrl: swapiService.getPersonImg\n  };\n};\n\nexport default withSwapiService(mapMethodsToProps)(PersonDetails);","import React from 'react';\n\nimport { withSwapiService } from \"../hoc-helpers\";\nimport ItemDetails, { Record } from \"../item-details\";\n\nconst PlanetDetails = props => {\n  return (\n    <ItemDetails {...props} >\n\n      <Record field={'population'} label={'Population'} />\n      <Record field={'rotationPeriod'} label={'Rotation Period'} />\n      <Record field={'diameter'} label={'Diameter'} />\n\n    </ItemDetails>\n  );\n};\n\nconst mapMethodsToProps = swapiService => {\n  return {\n    getData: swapiService.getPlanet,\n    getImgUrl: swapiService.getPlanetImg\n  };\n};\n\nexport default withSwapiService(mapMethodsToProps)(PlanetDetails);","import React from 'react';\n\nimport { withSwapiService } from \"../hoc-helpers\";\nimport ItemDetails, { Record } from \"../item-details\";\n\nconst StarshipDetails = props => {\n  return (\n    <ItemDetails {...props}>\n\n      <Record field={'length'} label={'Length'} />\n      <Record field={'crew'} label={'Crew'} />\n      <Record field={'costInCredits'} label={'Cost'} />\n\n    </ItemDetails>\n  );\n};\n\nconst mapMethodsToProps = swapiService => {\n  return {\n    getData: swapiService.getStarship,\n    getImgUrl: swapiService.getStarshipImg\n  };\n};\n\nexport default withSwapiService(mapMethodsToProps)(StarshipDetails);\n","import React, { Component } from 'react';\n\nimport ErrorBoundry from \"../error-boundry\";\nimport Row from \"../row\";\nimport {PersonDetails, PersonList} from \"../sw-components\";\n\nexport default class PeoplePage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedItem: null\n    }\n  }\n\n  onItemSelected = id => {\n    this.setState({\n      selectedItem: id\n    });\n  }\n\n  render() {\n    const {selectedItem} = this.state;\n\n    return (\n      <ErrorBoundry>\n        <Row\n          side={<PersonList onItemSelected={this.onItemSelected} />}\n          main={<PersonDetails itemId={selectedItem} />} />\n      </ErrorBoundry>\n    );\n  }\n};","import React, { Component } from 'react';\n\nimport ErrorBoundry from \"../error-boundry\";\nimport Row from \"../row\";\nimport {PlanetDetails, PlanetList} from \"../sw-components\";\n\nexport default class PlanetsPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedItem: null\n    }\n  }\n\n  onItemSelected = id => {\n    this.setState({\n      selectedItem: id\n    });\n  }\n\n  render() {\n    const {selectedItem} = this.state;\n\n    return (\n      <ErrorBoundry>\n        <Row\n          side={<PlanetList onItemSelected={this.onItemSelected} />}\n          main={<PlanetDetails itemId={selectedItem} />} />\n      </ErrorBoundry>\n    );\n  }\n};","import React, { Component } from 'react';\n\nimport ErrorBoundry from \"../error-boundry\";\nimport Row from \"../row\";\nimport {StarshipDetails, StarshipList} from \"../sw-components\";\n\nexport default class StarshipsPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedItem: null\n    }\n  }\n\n  onItemSelected = id => {\n    this.setState({\n      selectedItem: id\n    });\n  }\n\n  render() {\n    const {selectedItem} = this.state;\n\n    return (\n      <ErrorBoundry>\n        <Row\n          side={<StarshipList onItemSelected={this.onItemSelected} />}\n          main={<StarshipDetails itemId={selectedItem} />} />\n      </ErrorBoundry>\n    );\n  }\n};","import App from \"./app\";\nimport './app.css';\n\nexport default App;","import React, { Component } from 'react';\n\nimport './app.css';\nimport Header from \"../header\";\nimport RandomPlanet from \"../random-planet\";\nimport {PeoplePage, PlanetsPage, StarshipsPage} from \"../pages\";\nimport ErrorBoundry from \"../error-boundry\";\nimport SwapiService from \"../api/swapi-service\";\nimport { SwapiServiceProvider } from \"../swapi-service-context\";\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedPerson: 2\n    };\n  }\n\n  swapiService = new SwapiService();\n\n  onItemSelected = id => {\n    this.setState({\n      selectedPerson: id\n    });\n  };\n\n  render() {\n    return (\n      <ErrorBoundry>\n        <SwapiServiceProvider value={this.swapiService}>\n          <div className={'app container'}>\n            <Header />\n\n            <RandomPlanet />\n\n            <PeoplePage />\n            <PlanetsPage />\n            <StarshipsPage />\n          </div>\n        </SwapiServiceProvider>\n      </ErrorBoundry>\n    );\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}