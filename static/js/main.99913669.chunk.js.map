{"version":3,"sources":["components/header/index.js","components/header/header.js","components/spinner/index.js","components/spinner/spinner.js","components/error-message/error-message.js","components/error-message/index.js","components/api/swapi-service.js","components/random-planet/random-planet.js","components/random-planet/index.js","components/pages/home-page.js","components/error-boundry/index.js","components/error-boundry/error-boundry.js","components/row/index.js","components/row/Row.js","components/item-list/item-list.js","components/item-list/index.js","components/hoc-helpers/with-data.js","components/swapi-service-context/swapi-service-context.js","components/hoc-helpers/with-swapi-service.js","components/hoc-helpers/with-child-function.js","components/sw-components/item-lists.js","components/item-details/item-details.js","components/item-details/index.js","components/sw-components/person-details.js","components/sw-components/plane-details.js","components/sw-components/starship-details.js","components/pages/people-page.js","components/pages/planets-page.js","components/pages/starships-page.js","components/pages/secret-page.js","components/pages/login-page.js","components/app/index.js","components/app/app.js","index.js"],"names":["Header","className","to","Component","Spinner","ErrorMessage","SwapiService","_apiBase","_imgBase","getAllPeople","a","getResource","res","results","map","_transformPerson","getPerson","id","person","result","properties","getPersonImg","getAllPlanets","_transformPlanet","getPlanet","planet","getPlanetImg","getAllStarships","_transformStarship","getStarship","starship","getStarshipImg","_extractId","name","gender","birthYear","birth_year","eyeColor","eye_color","population","rotationPeriod","rotation_period","diameter","model","manufacturer","costInCredits","cost_in_credits","length","crew","passengers","cargoCapacity","cargo_capacity","url","fetch","this","ok","Error","status","json","item","match","RandomPlanet","props","swapiService","onError","err","setState","error","loading","onPlanetLoaded","updatePlanet","Math","floor","random","then","catch","state","interval","setInterval","updateInterval","clearInterval","errorMessage","spinner","content","defaultProps","PlanetView","src","alt","HomePage","ErrorBoundry","children","Row","side","main","ItemList","data","onItemSelected","renderLabel","items","label","onClick","withData","Wrapped","getData","update","createContext","SwapiServiceProvider","Provider","SwapiServiceConsumer","Consumer","withSwapiService","mapServiceToProps","console","log","serviceProps","withChildFunction","fn","renderName","PersonList","PlanetList","StarshipList","ItemDetails","img","updateItem","prevProps","itemId","getImgUrl","React","Children","child","cloneElement","Record","field","withRouter","history","params","push","SecretPage","isLoggedIn","LoginPage","onLogin","App","value","path","component","exact","PeoplePage","PlanetsPage","StarshipsPage","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.99913669.chunk.js","sourcesContent":["import './header.css';\nimport Header from \"./header\";\n\nexport default Header;","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default class Header extends Component {\n  render() {\n    return (\n      <header className={'header d-flex'}>\n        <h3>\n          <Link to={\"/star-wars-db/\"}>Star DB</Link>\n        </h3>\n        <ul className={'d-flex'}>\n          <li>\n            <Link to={\"/people/\"}>People</Link>\n          </li>\n          <li>\n            <Link to={\"/planets/\"}>Planets</Link>\n          </li>\n          <li>\n            <Link to={\"/starships/\"}>Starships</Link>\n          </li>\n          <li>\n            <Link to={\"/login\"}>Login</Link>\n          </li>\n          <li>\n            <Link to={\"/secret\"}>Secret</Link>\n          </li>\n        </ul>\n      </header>\n    );\n  }\n};","import Spinner from \"./spinner\";\n\nexport default Spinner;","import React from 'react';\nimport './spinner.css';\n\nconst Spinner = () => {\n  return (\n    <div className={'loadingio-spinner-double-ring-6yzmo4p4rgx'}>\n      <div className={'ldio-fup0fcf296'}>\n        <div></div>\n        <div></div>\n      </div>\n    </div>\n  );\n};\n\nexport default Spinner;","import React from 'react';\n\nconst ErrorMessage =() => {\n  return (\n    <div className={'error-message'}>\n      <h1>BOOM!</h1>\n      <span>\n        something has gone terrible wrong\n      </span>\n      <span>\n        (but we already sent droids to fix it)\n      </span>\n    </div>\n  );\n};\n\nexport default ErrorMessage;","import ErrorMessage from \"./error-message\";\nimport \"./error-message.css\";\n\nexport default ErrorMessage;","export default class SwapiService {\n\n  _apiBase = 'https://www.swapi.tech/api';\n  _imgBase = 'https://starwars-visualguide.com/assets/img';\n\n  async getResource(url) {\n    const res = await fetch(`${this._apiBase}${url}`);\n    if(!res.ok) {\n      throw new Error(`Could not fetch ${url}, received ${res.status}`);\n    }\n\n    return await res.json();\n  }\n\n  getAllPeople = async () => {\n    const res = await this.getResource(`/people/`);\n    return res.results.map(this._transformPerson);\n  }\n\n  getPerson = async id => {\n    const person = await this.getResource(`/people/${id}/`);\n    return this._transformPerson(person.result.properties);\n  }\n\n  getPersonImg = ({id}) => {\n    return `${this._imgBase}/characters/${id}.jpg`;\n  };\n\n  getAllPlanets = async () => {\n    const res = await this.getResource(`/planets/`);\n    return res.results.map(this._transformPlanet);\n  }\n\n  getPlanet = async id => {\n    const planet = await this.getResource(`/planets/${id}/`);\n    return this._transformPlanet(planet.result.properties);\n  }\n\n  getPlanetImg = ({id}) => {\n    return `${this._imgBase}/planets/${id}.jpg`;\n  };\n\n  getAllStarships = async () => {\n    const res = await this.getResource(`/starships/`);\n    return res.results.map(this._transformStarship);\n  }\n\n  getStarship = async id => {\n    const starship = await this.getResource(`/starships/${id}/`);\n    return this._transformStarship(starship.result.properties);\n  }\n\n  getStarshipImg = ({id}) => {\n    return `${this._imgBase}/starships/${id}.jpg`;\n  };\n\n  _extractId(item) {\n    const idRegExp = /\\/([0-9]*)$/;\n    return item.url.match(idRegExp)[1];\n  }\n\n  _transformPerson = person => {\n    return {\n      id: this._extractId(person),\n      name: person.name,\n      gender: person.gender,\n      birthYear: person.birth_year,\n      eyeColor: person.eye_color\n    }\n  }\n\n  _transformPlanet = planet => {\n    return {\n      id: this._extractId(planet),\n      name: planet.name,\n      population: planet.population,\n      rotationPeriod: planet.rotation_period,\n      diameter: planet.diameter\n    }\n  }\n\n  _transformStarship = starship => {\n    return {\n      id: this._extractId(starship),\n      name: starship.name,\n      model: starship.model,\n      manufacturer: starship.manufacturer,\n      costInCredits: starship.cost_in_credits,\n      length: starship.length,\n      crew: starship.crew,\n      passengers: starship.passengers,\n      cargoCapacity: starship.cargo_capacity\n    }\n  }\n};","import React, { Component, Fragment } from \"react\";\n\nimport Spinner from \"../spinner\";\nimport ErrorMessage from \"../error-message\";\nimport SwapiService from \"../api/swapi-service\";\n\nexport default class RandomPlanet extends Component {\n\n  static defaultProps = {\n    updateInterval: 5000\n  };\n\n  static propTypes = {\n    updateInterval: (props, propName, componentName) => {\n      const value = props[propName];\n\n      if(typeof value == \"number\" && !isNaN(value)) {\n        return null;\n      }\n\n      return new TypeError(`${componentName}: ${propName} must be number`);\n    }\n  };\n\n  swapiService = new SwapiService();\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      planet: {},\n      error: false,\n      loading: true\n    };\n  }\n\n  onError = err => {\n    this.setState({\n      error: true,\n      loading: false\n    });\n  }\n\n  onPlanetLoaded = planet => {\n    this.setState({\n      planet,\n      error: false,\n      loading: false\n    });\n  };\n\n  updatePlanet = () => {\n    const id = Math.floor(Math.random()*10+3);\n    this.swapiService\n      .getPlanet(id)\n      .then(this.onPlanetLoaded)\n      .catch(this.onError)\n  };\n\n  componentDidMount() {\n    this.updatePlanet();\n    this.interval = setInterval(this.updatePlanet, this.props.updateInterval);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    const { error, loading, planet } = this.state;\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error) ? <PlanetView planet={planet}/> : null;\n\n    return (\n      <div className={'random-planet d-flex jumbotron rounded'}>\n        { errorMessage }\n        { spinner }\n        { content }\n      </div>\n    );\n  }\n};\n\nconst PlanetView = props => {\n  const { planet: {id, name, population, rotationPeriod, diameter} } = props;\n\n  return (\n    <Fragment>\n      <img className={'planet-img'}\n           src={`https://starwars-visualguide.com/assets/img/planets/${id}.jpg`} alt=\"\"/>\n      <div>\n        <h4>{name}</h4>\n        <ul className={'list-group list-group-flush'}>\n          <li className={'list-group-item'}>\n            <span className={'term'}>Population</span>\n            <span>{population}</span>\n          </li>\n          <li className={'list-group-item'}>\n            <span className={'term'}>Rotation Period</span>\n            <span>{rotationPeriod}</span>\n          </li>\n          <li className={'list-group-item'}>\n            <span className={'term'}>Diameter</span>\n            <span>{diameter}</span>\n          </li>\n        </ul>\n      </div>\n    </Fragment>\n  );\n};","import './random-planet.css';\nimport RandomPlanet from \"./random-planet\";\n\nexport default RandomPlanet;","import React from 'react';\n\nimport RandomPlanet from \"../random-planet\";\n\nconst HomePage = () => {\n  return (\n    <div className={'row'}>\n      <div className={'col'}>\n        <RandomPlanet />\n        <h1>Welcome to Star Wars DB!</h1>\n      </div>\n    </div>\n  );\n};\n\nexport default HomePage;","import ErrorBoundry from \"./error-boundry\";\n\nexport default ErrorBoundry;","import React, {Component} from \"react\";\nimport ErrorMessage from \"../error-message\";\n\nexport default class ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: false\n    }\n  }\n\n  componentDidCatch() {\n    this.setState({\n      error: true\n    });\n  }\n\n  render() {\n    if (this.state.error) {\n      return <ErrorMessage />;\n    }\n\n    return this.props.children;\n  }\n};","import Row from \"./Row\";\n\nexport default Row;","import React from 'react';\nimport PropTypes from \"prop-types\";\n\nconst Row = ({ side, main }) => {\n  return (\n    <div className={'row mb-2'}>\n      <div className={'col-md-4'}>\n        { side }\n      </div>\n      <div className={'col-md-8'}>\n        { main }\n      </div>\n    </div>\n  );\n};\n\nRow.propTypes = {\n  side: PropTypes.node,\n  main: PropTypes.node\n};\n\nexport default Row;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport './item-list.css';\n\nconst ItemList = props => {\n  const {data, onItemSelected, children: renderLabel} = props;\n\n  const items = data.map(item => {\n    const { id } = item;\n    const label = renderLabel(item);\n\n    return (\n      <li className={'list-group-item'}\n          key={id}\n          onClick={()=>onItemSelected(id)}>\n          { label }\n      </li>\n    );\n  });\n\n  return (\n    <ul className={'item-list list-group'}>\n      { items }\n    </ul>\n  );\n};\n\nItemList.defaultProps = {\n  onItemSelected: () => {}\n};\n\nItemList.propTypes = {\n  onItemSelected: PropTypes.func,\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n  children: PropTypes.func.isRequired\n};\n\nexport default ItemList;","import ItemList from \"./item-list\";\n\nexport default ItemList;","import React, {Component} from 'react';\n\nimport Spinner from \"../spinner\";\nimport ErrorMessage from \"../error-message\";\n\nconst withData = Wrapped => {\n  return class extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        data: null,\n        error: false,\n        loading: true\n      };\n    }\n\n    update() {\n      this.setState({\n        error: false,\n        loading: true\n      });\n\n      this.props.getData()\n        .then(data => {\n          this.setState({\n            data,\n            loading: false\n          });\n        })\n        .catch(() => {\n          this.setState({\n            error: true,\n            loading: false\n          });\n        });\n    }\n\n    componentDidMount() {\n      this.update();\n    }\n\n    render() {\n      const { data, loading, error } = this.state;\n\n      if (loading) {\n        return <Spinner />;\n      }\n\n      if (error) {\n        return <ErrorMessage />;\n      }\n\n      return <Wrapped {...this.props} data={data}/>;\n    }\n  };\n};\n\nexport default withData;","import { createContext } from 'react';\n\nconst {\n  Provider : SwapiServiceProvider,\n  Consumer : SwapiServiceConsumer\n} = createContext();\n\nexport {\n  SwapiServiceProvider,\n  SwapiServiceConsumer\n};","import React from 'react';\n\nimport { SwapiServiceConsumer } from \"../swapi-service-context\";\n\nconst withSwapiService = mapServiceToProps => Wrapped => {\n  // console.log(Wrapped);\n  return props => {\n    console.log(props);\n    return (\n      <SwapiServiceConsumer>\n        {\n          swapiService => {\n            const serviceProps = mapServiceToProps(swapiService);\n\n            return (\n              <Wrapped {...props} {...serviceProps} />\n            );\n          }\n        }\n      </SwapiServiceConsumer>\n    );\n  };\n}\n\nexport default withSwapiService;","import React from \"react\";\n\nconst withChildFunction = fn => Wrapped => {\n  return props => {\n    return (\n      <Wrapped {...props}>\n        { fn }\n      </Wrapped>\n    );\n  };\n};\n\nexport default withChildFunction;","import ItemList from \"../item-list\";\nimport { withData, withSwapiService, withChildFunction } from '../hoc-helpers';\n\nconst renderName = item => `${item.name}`;\n\nconst mapPersonMethodsToProps = swapiService => {\n  return {\n    getData: swapiService.getAllPeople\n  };\n};\n\nconst mapPlanetMethodsToProps = swapiService => {\n  return {\n    getData: swapiService.getAllPlanets\n  };\n};\n\nconst mapStarshipMethodsToProps = swapiService => {\n  return {\n    getData: swapiService.getAllStarships\n  };\n};\n\nconst PersonList = withSwapiService(mapPersonMethodsToProps)(\n                      withData(withChildFunction(renderName)(\n                        ItemList)));\n\nconst PlanetList = withSwapiService(mapPlanetMethodsToProps)(\n                      withData(withChildFunction(renderName)(\n                        ItemList)));\n\nconst StarshipList = withSwapiService(mapStarshipMethodsToProps)(\n                      withData(withChildFunction(renderName)(\n                        ItemList)));\n\nexport {\n  PersonList,\n  PlanetList,\n  StarshipList\n};","import React, {Component} from \"react\";\n\nimport \"./item-details.css\";\nimport Spinner from \"../spinner\";\nimport ErrorMessage from \"../error-message\";\n\nexport default class ItemDetails extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: false,\n      loading: false,\n      item: null,\n      img: null\n    };\n  }\n\n  componentDidMount() {\n    this.updateItem();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.itemId !== prevProps.itemId) {\n\n      this.setState({\n        error: false,\n        loading: true\n      });\n\n      this.updateItem();\n    }\n  }\n\n  updateItem() {\n    const {itemId, getData, getImgUrl} = this.props;\n\n    if (!itemId) {\n      return;\n    }\n\n    getData(itemId)\n      .then((item) => {\n        this.setState({\n          loading: false,\n          item,\n          img: getImgUrl(item)\n        });\n      })\n      .catch(() => {\n        this.setState({\n          error: true,\n          loading: false\n        });\n      });\n  }\n\n  render() {\n    const {item, img, loading, error } = this.state;\n\n    if (loading) {\n      return <Spinner />;\n    }\n\n    if (error) {\n      return <ErrorMessage />;\n    }\n\n    if (!item) {\n      return <span>Select from a list</span>\n    }\n\n    return (\n      <div className={'item-detail jumbotron rounded'}>\n        <img src={img} alt=\"\"/>\n        <div>\n          <h4>{item.name}</h4>\n          <ul className={'list-group list-group-flush'}>\n            {\n              React.Children.map(this.props.children, child => {\n                return React.cloneElement(child,{item});\n              })\n            }\n          </ul>\n        </div>\n      </div>\n    );\n  }\n};\n\nconst Record = ({ item, field, label }) => {\n  return (\n    <li className={'list-group-item'}>\n      <span className={'term'}>{label}</span>\n      <span>{item[field]}</span>\n    </li>\n  );\n};\n\nexport {\n  Record\n};","import ItemDetails, { Record } from \"./item-details\";\n\nexport { Record };\nexport default ItemDetails;","import React from 'react';\n\nimport { withSwapiService } from \"../hoc-helpers\";\nimport ItemDetails, { Record } from \"../item-details\";\n\nconst PersonDetails = props => {\n  return (\n    <ItemDetails {...props} >\n\n      <Record field={'gender'} label={'Gender'} />\n      <Record field={'birthYear'} label={'Birth Year'} />\n      <Record field={'eyeColor'} label={'Eye Color'} />\n\n    </ItemDetails>\n  );\n};\n\nconst mapMethodsToProps = swapiService => {\n  return {\n    getData: swapiService.getPerson,\n    getImgUrl: swapiService.getPersonImg\n  };\n};\n\nexport default withSwapiService(mapMethodsToProps)(PersonDetails);","import React from 'react';\n\nimport { withSwapiService } from \"../hoc-helpers\";\nimport ItemDetails, { Record } from \"../item-details\";\n\nconst PlanetDetails = props => {\n  return (\n    <ItemDetails {...props} >\n\n      <Record field={'population'} label={'Population'} />\n      <Record field={'rotationPeriod'} label={'Rotation Period'} />\n      <Record field={'diameter'} label={'Diameter'} />\n\n    </ItemDetails>\n  );\n};\n\nconst mapMethodsToProps = swapiService => {\n  return {\n    getData: swapiService.getPlanet,\n    getImgUrl: swapiService.getPlanetImg\n  };\n};\n\nexport default withSwapiService(mapMethodsToProps)(PlanetDetails);","import React from 'react';\n\nimport { withSwapiService } from \"../hoc-helpers\";\nimport ItemDetails, { Record } from \"../item-details\";\n\nconst StarshipDetails = props => {\n  return (\n    <ItemDetails {...props}>\n\n      <Record field={'length'} label={'Length'} />\n      <Record field={'crew'} label={'Crew'} />\n      <Record field={'costInCredits'} label={'Cost'} />\n\n    </ItemDetails>\n  );\n};\n\nconst mapMethodsToProps = swapiService => {\n  return {\n    getData: swapiService.getStarship,\n    getImgUrl: swapiService.getStarshipImg\n  };\n};\n\nexport default withSwapiService(mapMethodsToProps)(StarshipDetails);\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport ErrorBoundry from \"../error-boundry\";\nimport Row from \"../row\";\nimport {PersonDetails, PersonList} from \"../sw-components\";\n\nconst PeoplePage = ({ history, match }) => {\n\n  const { id } = match.params;\n\n  return (\n    <ErrorBoundry>\n      <h2>People</h2>\n      <Row\n        side={<PersonList onItemSelected={id => history.push(id)} />}\n        main={<PersonDetails itemId={id} />} />\n    </ErrorBoundry>\n  );\n};\n\nexport default withRouter(PeoplePage);","import React from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport ErrorBoundry from \"../error-boundry\";\nimport Row from \"../row\";\nimport {PlanetDetails, PlanetList} from \"../sw-components\";\n\nconst PlanetsPage = ({ history, match }) => {\n\n  const { id } = match.params;\n\n  return (\n    <ErrorBoundry>\n      <h2>Planets</h2>\n      <Row\n        side={<PlanetList onItemSelected={(id) => history.push(id)} />}\n        main={<PlanetDetails itemId={id} />} />\n    </ErrorBoundry>\n  );\n};\n\nexport default withRouter(PlanetsPage);","import React from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport Row from \"../row\";\nimport ErrorBoundry from \"../error-boundry\";\nimport {StarshipDetails, StarshipList} from \"../sw-components\";\n\nconst StarshipsPage = ({history, match}) => {\n\n  const { id } = match.params;\n\n  return (\n    <ErrorBoundry>\n      <h2>Starships</h2>\n      <Row\n        side={<StarshipList onItemSelected={(id) => history.push(id)} />}\n        main={<StarshipDetails itemId={id} />} />\n    </ErrorBoundry>\n  );\n};\n\nexport default withRouter(StarshipsPage);","import React from 'react';\nimport { Redirect } from 'react-router-dom';\n\nconst SecretPage = ({isLoggedIn}) => {\n\n  if (isLoggedIn) {\n    return  (\n      <div className={'jumbotron text-center'}>\n        <h3>This page is full of secrets!!!</h3>\n      </div>\n    );\n  }\n\n  return <Redirect to={'/login'} />;\n};\n\nexport default SecretPage;","import React from 'react';\nimport { Redirect } from 'react-router-dom';\n\nconst LoginPage = ({ isLoggedIn, onLogin }) => {\n  if (isLoggedIn) {\n    return <Redirect to={'/star-wars-db/'} />\n  }\n\n  return (\n    <div className={'jumbotron'}>\n      <h3>Login to see secret page!</h3>\n      <button className={'btn btn-primary'}\n        onClick={onLogin}>\n        Login\n      </button>\n    </div>\n  );\n};\n\nexport default LoginPage;","import App from \"./app\";\nimport './app.css';\n\nexport default App;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport './app.css';\nimport Header from \"../header\";\nimport RandomPlanet from \"../random-planet\";\nimport {LoginPage, SecretPage, PeoplePage, PlanetsPage, StarshipsPage, HomePage} from \"../pages\";\nimport ErrorBoundry from \"../error-boundry\";\nimport SwapiService from \"../api/swapi-service\";\nimport { SwapiServiceProvider } from \"../swapi-service-context\";\nimport StarshipDetails from \"../sw-components/starship-details\";\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoggedIn: false\n    };\n  }\n\n  swapiService = new SwapiService();\n\n  onLogin = () => {\n    this.setState({\n      isLoggedIn: true\n    });\n  }\n\n  render() {\n    const {isLoggedIn} = this.state;\n\n    return (\n      <ErrorBoundry>\n        <SwapiServiceProvider value={this.swapiService}>\n          <Router>\n            <div className={'app container'}>\n              <Header />\n\n              <Switch>\n                <Route path={\"/star-wars-db/\"} component={HomePage} exact />\n                <Route path={\"/people/:id?\"} component={PeoplePage} />\n                <Route path={\"/planets/:id?\"} component={PlanetsPage} />\n                <Route path={\"/starships/:id?\"} component={StarshipsPage} />\n                <Route path={\"/login\"}\n                       render={() => (\n                         <LoginPage\n                           onLogin={this.onLogin}\n                           isLoggedIn={isLoggedIn}/>\n                       )} />\n                <Route path={\"/secret\"}\n                       render={() => (\n                         <SecretPage isLoggedIn={isLoggedIn}/>\n                       )} />\n                <Route render={() => <h2>Page not found</h2>} />\n              </Switch>\n            </div>\n          </Router>\n        </SwapiServiceProvider>\n      </ErrorBoundry>\n    );\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}